
05_ADC_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800085c  0800085c  0000185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000880  08000880  00001888  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000880  08000880  00001888  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000880  08000888  00001888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000880  08000880  00001880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000884  08000884  00001884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000888  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000888  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017f2  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad3  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00003b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ef  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e269  00000000  00000000  00003dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e97  00000000  00000000  00012040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050a25  00000000  00000000  00013ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000648fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003bc  00000000  00000000  00064940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00064cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000844 	.word	0x08000844

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000844 	.word	0x08000844

080001d8 <_ZN10ADC_CUSTOMC1EP11ADC_TypeDefP12GPIO_TypeDefh>:
#define ADC_ON 		 (1U << 0) // ADC ON bit
#define ADC_CONT_CON (1U << 1) // Continuous conversion mode
#define ADC_SW_START (1U << 30) // Start software conversion
#define SR_EOC   (1U << 1) // End of conversion flag

ADC_CUSTOM::ADC_CUSTOM(ADC_TypeDef* adcX, GPIO_TypeDef* gpioX, uint8_t pin)
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
 80001e4:	70fb      	strb	r3, [r7, #3]
	: adcX(adcX), gpioX(gpioX), pin(pin) {
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	68ba      	ldr	r2, [r7, #8]
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	78fa      	ldrb	r2, [r7, #3]
 80001f6:	721a      	strb	r2, [r3, #8]
}
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4618      	mov	r0, r3
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <_ZN10ADC_CUSTOM4initEv>:

void ADC_CUSTOM::init() {
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= GPIOAEN; // Enable clock for GPIOA
 8000210:	4b1d      	ldr	r3, [pc, #116]	@ (8000288 <_ZN10ADC_CUSTOM4initEv+0x80>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a1c      	ldr	r2, [pc, #112]	@ (8000288 <_ZN10ADC_CUSTOM4initEv+0x80>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
	gpioX->MODER |= (1U << (2 * pin));
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	6819      	ldr	r1, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	7a1b      	ldrb	r3, [r3, #8]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	2201      	movs	r2, #1
 800022a:	409a      	lsls	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	430a      	orrs	r2, r1
 8000232:	601a      	str	r2, [r3, #0]
	gpioX->MODER |= (1U << (2 * pin + 1)); // Set pin as analog mode
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	6819      	ldr	r1, [r3, #0]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	7a1b      	ldrb	r3, [r3, #8]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	3301      	adds	r3, #1
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	430a      	orrs	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
	RCC->APB2ENR |= ADC1EN; // Enable clock for ADC1
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <_ZN10ADC_CUSTOM4initEv+0x80>)
 8000250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000252:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <_ZN10ADC_CUSTOM4initEv+0x80>)
 8000254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000258:	6453      	str	r3, [r2, #68]	@ 0x44
	adcX->SQR3 = ADC_CH1; // Set channel 1 for ADC
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2201      	movs	r2, #1
 8000260:	635a      	str	r2, [r3, #52]	@ 0x34
	adcX->SQR1 = ADC_SEQ_LEN; // Set sequence length to 1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2200      	movs	r2, #0
 8000268:	62da      	str	r2, [r3, #44]	@ 0x2c
	adcX->CR2 |= ADC_ON; // Enable ADC
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f042 0201 	orr.w	r2, r2, #1
 8000278:	609a      	str	r2, [r3, #8]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40023800 	.word	0x40023800

0800028c <_ZN10ADC_CUSTOM16start_conversionEv>:

void ADC_CUSTOM::start_conversion() {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	adcX->CR2 |= ADC_CONT_CON; // Set continuous conversion mode
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f042 0202 	orr.w	r2, r2, #2
 80002a2:	609a      	str	r2, [r3, #8]
	adcX->CR2 |= ADC_SW_START; // Start conversion
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80002b2:	609a      	str	r2, [r3, #8]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <_ZN10ADC_CUSTOM4readEv>:

uint32_t ADC_CUSTOM::read() {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	while (!(adcX->SR & SR_EOC))
 80002c8:	bf00      	nop
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f003 0302 	and.w	r3, r3, #2
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	bf0c      	ite	eq
 80002d8:	2301      	moveq	r3, #1
 80002da:	2300      	movne	r3, #0
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d1f3      	bne.n	80002ca <_ZN10ADC_CUSTOM4readEv+0xa>
		; // Wait until conversion is complete
	return adcX->DR; // Read the conversion result
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <_ZN6FPU_CP6enableEv>:
 *      Author: ahmad
 */

#include "fpu.hpp"

void FPU_CP::enable(void) {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	SCB->CPACR |= (1 << 20);
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 80002fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 8000300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 21);
 8000308:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 800030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030e:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 8000310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 22);
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 800031a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800031e:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 8000320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 23);
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <_ZN6FPU_CP6enableEv+0x50>)
 8000330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <_ZN4GPIOC1EP12GPIO_TypeDefhb>:
 *  Created on: Aug 13, 2025
 *      Author: ahmad
 */
#include "led.hpp"

GPIO::GPIO(GPIO_TypeDef *port, uint8_t pin, bool isOutput) :
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	4611      	mov	r1, r2
 8000354:	461a      	mov	r2, r3
 8000356:	460b      	mov	r3, r1
 8000358:	71fb      	strb	r3, [r7, #7]
 800035a:	4613      	mov	r3, r2
 800035c:	71bb      	strb	r3, [r7, #6]
		port(port), pin(pin) {
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	68ba      	ldr	r2, [r7, #8]
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	711a      	strb	r2, [r3, #4]
	if (port == GPIOA) {
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4a30      	ldr	r2, [pc, #192]	@ (8000430 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xe8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x38>
		RCC->AHB1ENR |= (1U << 0);
 8000372:	4b30      	ldr	r3, [pc, #192]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	4a2f      	ldr	r2, [pc, #188]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6313      	str	r3, [r2, #48]	@ 0x30
 800037e:	e02a      	b.n	80003d6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOA
	else if (port == GPIOB) {
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	4a2d      	ldr	r2, [pc, #180]	@ (8000438 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf0>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4e>
		RCC->AHB1ENR |= (1U << 1);
 8000388:	4b2a      	ldr	r3, [pc, #168]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a29      	ldr	r2, [pc, #164]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800038e:	f043 0302 	orr.w	r3, r3, #2
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
 8000394:	e01f      	b.n	80003d6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOB
	else if (port == GPIOC) {
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4a28      	ldr	r2, [pc, #160]	@ (800043c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf4>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x64>
		RCC->AHB1ENR |= (1U << 2);
 800039e:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a24      	ldr	r2, [pc, #144]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003aa:	e014      	b.n	80003d6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOC
	else if (port == GPIOD) {
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	4a24      	ldr	r2, [pc, #144]	@ (8000440 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf8>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7a>
		RCC->AHB1ENR |= (1U << 3);
 80003b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
 80003c0:	e009      	b.n	80003d6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOD
	else if (port == GPIOE) {
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000444 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xfc>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d105      	bne.n	80003d6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
		RCC->AHB1ENR |= (1U << 4);
 80003ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a19      	ldr	r2, [pc, #100]	@ (8000434 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80003d0:	f043 0310 	orr.w	r3, r3, #16
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
	} // Enable clock for GPIOE

	if (isOutput) {
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d016      	beq.n	800040a <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xc2>
		port->MODER |= (1U << (pin * 2)); // Set pin as output
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	431a      	orrs	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	601a      	str	r2, [r3, #0]
		port->MODER &= ~(1U << (pin * 2 + 1));
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	3301      	adds	r3, #1
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	401a      	ands	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e00a      	b.n	8000420 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xd8>
	} else {
		port->MODER &= ~(3U << (pin * 2)); // Set pin as input
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	2103      	movs	r1, #3
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	601a      	str	r2, [r3, #0]
	}
}
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4618      	mov	r0, r3
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40021000 	.word	0x40021000

08000448 <_ZN4GPIO6toggleEv>:

void GPIO::toggle() {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	port->ODR ^= (1U << pin); // Toggle pin state
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6959      	ldr	r1, [r3, #20]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	461a      	mov	r2, r3
 800045c:	2301      	movs	r3, #1
 800045e:	fa03 f202 	lsl.w	r2, r3, r2
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	404a      	eors	r2, r1
 8000468:	615a      	str	r2, [r3, #20]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <_ZN4GPIO4readEv>:
	port->ODR |= (1U << pin); // Set pin high
}
void GPIO::reset() {
	port->ODR &= ~(1U << pin); // Set pin low
}
bool GPIO::read() {
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U << pin)); // Read pin state
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	691a      	ldr	r2, [r3, #16]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	4619      	mov	r1, r3
 800048a:	2301      	movs	r3, #1
 800048c:	408b      	lsls	r3, r1
 800048e:	4013      	ands	r3, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	bf14      	ite	ne
 8000494:	2301      	movne	r3, #1
 8000496:	2300      	moveq	r3, #0
 8000498:	b2db      	uxtb	r3, r3
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <main>:
#include "timebase.hpp"
#include "adc_custom.hpp"

uint32_t adc_value = 0; // Variable to store ADC value

int main() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0
	FPU_CP::enable(); // Enable the FPU
 80004ae:	f7ff ff21 	bl	80002f4 <_ZN6FPU_CP6enableEv>
	TimeBase::init(); // Initialize the time base for SysTick
 80004b2:	f000 f853 	bl	800055c <_ZN8TimeBase4initEv>
	ADC_CUSTOM adc_custom(ADC1, GPIOA, 1); // Create an instance of ADC_OBJ for ADC1 on pin PA1
 80004b6:	f107 001c 	add.w	r0, r7, #28
 80004ba:	2301      	movs	r3, #1
 80004bc:	4a21      	ldr	r2, [pc, #132]	@ (8000544 <main+0x9c>)
 80004be:	4922      	ldr	r1, [pc, #136]	@ (8000548 <main+0xa0>)
 80004c0:	f7ff fe8a 	bl	80001d8 <_ZN10ADC_CUSTOMC1EP11ADC_TypeDefP12GPIO_TypeDefh>
	GPIO led(GPIOA, 5, true); // Create an instance of GPIO for pin PA5 as output
 80004c4:	f107 0014 	add.w	r0, r7, #20
 80004c8:	2301      	movs	r3, #1
 80004ca:	2205      	movs	r2, #5
 80004cc:	491d      	ldr	r1, [pc, #116]	@ (8000544 <main+0x9c>)
 80004ce:	f7ff ff3b 	bl	8000348 <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	GPIO button(GPIOC, 13, false); // Create an instance of GPIO for pin PC13 as input
 80004d2:	f107 000c 	add.w	r0, r7, #12
 80004d6:	2300      	movs	r3, #0
 80004d8:	220d      	movs	r2, #13
 80004da:	491c      	ldr	r1, [pc, #112]	@ (800054c <main+0xa4>)
 80004dc:	f7ff ff34 	bl	8000348 <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	USART usart(USART2, 115200); // Create an instance of USART for USART2 with baud rate 115200
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e6:	491a      	ldr	r1, [pc, #104]	@ (8000550 <main+0xa8>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f89b 	bl	8000624 <_ZN5USARTC1EP13USART_TypeDefm>
	adc_custom.init(); // Initialize the ADC
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe88 	bl	8000208 <_ZN10ADC_CUSTOM4initEv>
	adc_custom.start_conversion(); // Start the ADC conversion
 80004f8:	f107 031c 	add.w	r3, r7, #28
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fec5 	bl	800028c <_ZN10ADC_CUSTOM16start_conversionEv>
	while (1) {
		adc_value = adc_custom.read(); // Read the ADC value, via value can be seen in the debugger or by making an int to string conversion
 8000502:	f107 031c 	add.w	r3, r7, #28
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff feda 	bl	80002c0 <_ZN10ADC_CUSTOM4readEv>
 800050c:	4603      	mov	r3, r0
 800050e:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <main+0xac>)
 8000510:	6013      	str	r3, [r2, #0]
		usart.sendString("Hello, USART...one second delay!\n\r"); // Send a string over USART
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4910      	ldr	r1, [pc, #64]	@ (8000558 <main+0xb0>)
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f90a 	bl	8000730 <_ZN5USART10sendStringEPKc>
		TimeBase::delay(1); // Delay for (1 second)
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f835 	bl	800058c <_ZN8TimeBase5delayEm>
		if (!button.read()) {
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ffa5 	bl	8000476 <_ZN4GPIO4readEv>
 800052c:	4603      	mov	r3, r0
 800052e:	f083 0301 	eor.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0e4      	beq.n	8000502 <main+0x5a>
			led.toggle(); // Toggle the LED state
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff83 	bl	8000448 <_ZN4GPIO6toggleEv>
		adc_value = adc_custom.read(); // Read the ADC value, via value can be seen in the debugger or by making an int to string conversion
 8000542:	e7de      	b.n	8000502 <main+0x5a>
 8000544:	40020000 	.word	0x40020000
 8000548:	40012000 	.word	0x40012000
 800054c:	40020800 	.word	0x40020800
 8000550:	40004400 	.word	0x40004400
 8000554:	2000001c 	.word	0x2000001c
 8000558:	0800085c 	.word	0x0800085c

0800055c <_ZN8TimeBase4initEv>:
#define ONE_SEC_DELAY	16000000
#define TICK_FREQ		1

volatile uint32_t TimeBase::msTicks = 0;

void TimeBase::init(){
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
	__disable_irq();
	SysTick->LOAD = ONE_SEC_DELAY - 1; // Load the SysTick timer with the value for 1 second
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <_ZN8TimeBase4initEv+0x28>)
 8000566:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <_ZN8TimeBase4initEv+0x2c>)
 8000568:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; // Clear the current value of the SysTick timer
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <_ZN8TimeBase4initEv+0x28>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = CTRL_CLKSOURCE | CTRL_TICKINT | CTRL_ENABLE; // Enable SysTick with processor clock, enable interrupt, and start the timer
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <_ZN8TimeBase4initEv+0x28>)
 8000572:	2207      	movs	r2, #7
 8000574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000576:	b662      	cpsie	i
}
 8000578:	bf00      	nop
	__enable_irq();
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	e000e010 	.word	0xe000e010
 8000588:	00f423ff 	.word	0x00f423ff

0800058c <_ZN8TimeBase5delayEm>:

void TimeBase::delay(uint32_t delay){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint32_t start = getTicks(); // Get the current tick count
 8000594:	f000 f81e 	bl	80005d4 <_ZN8TimeBase8getTicksEv>
 8000598:	60b8      	str	r0, [r7, #8]
	uint32_t waitTicks = delay; // Set the number of ticks to wait
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60fb      	str	r3, [r7, #12]

	if(waitTicks < MAX_DELAY){
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80005a4:	d002      	beq.n	80005ac <_ZN8TimeBase5delayEm+0x20>
		waitTicks+= TICK_FREQ; // Add one tick to ensure the delay is at least 1 ms
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
	}

	while((getTicks() - start) < waitTicks) {
 80005ac:	bf00      	nop
 80005ae:	f000 f811 	bl	80005d4 <_ZN8TimeBase8getTicksEv>
 80005b2:	4602      	mov	r2, r0
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	bf8c      	ite	hi
 80005be:	2301      	movhi	r3, #1
 80005c0:	2300      	movls	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f2      	bne.n	80005ae <_ZN8TimeBase5delayEm+0x22>
		// Wait until the specified delay has passed
		// This loop will run until the difference between current ticks and start ticks is less than waitTicks
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <_ZN8TimeBase8getTicksEv>:

uint32_t TimeBase::getTicks(){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005da:	b672      	cpsid	i
}
 80005dc:	bf00      	nop
	__disable_irq(); // Disable interrupts to ensure atomic access to msTicks
	uint32_t currentTicks = msTicks; // Read the current tick count
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <_ZN8TimeBase8getTicksEv+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80005e4:	b662      	cpsie	i
}
 80005e6:	bf00      	nop
	__enable_irq(); // Re-enable interrupts after reading
	return currentTicks;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000020 	.word	0x20000020

080005fc <_ZN8TimeBase13tickIncrementEv>:

void TimeBase::tickIncrement(){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	msTicks += TICK_FREQ; // Increment the msTicks by the tick frequency
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <_ZN8TimeBase13tickIncrementEv+0x18>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <_ZN8TimeBase13tickIncrementEv+0x18>)
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	20000020 	.word	0x20000020

08000618 <SysTick_Handler>:

extern "C" void SysTick_Handler(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	// This function is called every time the SysTick timer reaches zero
	TimeBase::tickIncrement(); // Increment the msTicks counter
 800061c:	f7ff ffee 	bl	80005fc <_ZN8TimeBase13tickIncrementEv>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN5USARTC1EP13USART_TypeDefm>:

// Forward declarations for static helper functions
static uint16_t compute_uart_br(uint32_t _periph_clock, uint32_t _baud_rate);
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t _periph_clock, uint32_t _baud_rate);

USART::USART(USART_TypeDef *usart, uint32_t baudrate) : usart(usart), baudRate(baudrate){
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
	RCC->AHB1ENR |= (1U << 0);
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(1U << 4);
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1d      	ldr	r2, [pc, #116]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800064e:	f023 0310 	bic.w	r3, r3, #16
 8000652:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1a      	ldr	r2, [pc, #104]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6013      	str	r3, [r2, #0]
	
	GPIOA->AFR[0] |= (1U << 8);
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000676:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U <<10);
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4a11      	ldr	r2, [pc, #68]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U << 11);
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800068a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800068e:	6213      	str	r3, [r2, #32]
	
	RCC->APB1ENR |= (1U << 17);
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 8000696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
	
	setBaudRate(16000000);
 800069c:	490a      	ldr	r1, [pc, #40]	@ (80006c8 <_ZN5USARTC1EP13USART_TypeDefm+0xa4>)
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f000 f816 	bl	80006d0 <_ZN5USART11setBaudRateEm>
	
	USART2->CR1 = (1U << 3);
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (1U << 13);
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 80006b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006b4:	60d3      	str	r3, [r2, #12]
}
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	00f42400 	.word	0x00f42400
 80006cc:	40004400 	.word	0x40004400

080006d0 <_ZN5USART11setBaudRateEm>:

void USART::setBaudRate(uint32_t periph_clock) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    uart_set_baudrate(usart, periph_clock, baudRate);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	461a      	mov	r2, r3
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f000 f83a 	bl	800075e <_ZL17uart_set_baudrateP13USART_TypeDefmm>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN5USART8sendCharEc>:

void USART::sendChar(char c) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
	while (!(USART2->SR & (1U << 7))); // Wait until TXE is set
 8000700:	bf00      	nop
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <_ZN5USART8sendCharEc+0x38>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf0c      	ite	eq
 800070e:	2301      	moveq	r3, #1
 8000710:	2300      	movne	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f4      	bne.n	8000702 <_ZN5USART8sendCharEc+0xe>
	USART2->DR = c & 0xFF; // Send character
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <_ZN5USART8sendCharEc+0x38>)
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	6053      	str	r3, [r2, #4]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40004400 	.word	0x40004400

08000730 <_ZN5USART10sendStringEPKc>:

void USART::sendString(const char *str) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	while (*str) {
 800073a:	e007      	b.n	800074c <_ZN5USART10sendStringEPKc+0x1c>
		sendChar(*str++);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	603a      	str	r2, [r7, #0]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffd4 	bl	80006f4 <_ZN5USART8sendCharEc>
	while (*str) {
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f3      	bne.n	800073c <_ZN5USART10sendStringEPKc+0xc>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_ZL17uart_set_baudrateP13USART_TypeDefmm>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t _periph_clock, uint32_t _baud_rate){
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_br(_periph_clock, _baud_rate);
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f000 f808 	bl	8000782 <_ZL15compute_uart_brmm>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	609a      	str	r2, [r3, #8]
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_ZL15compute_uart_brmm>:

static uint16_t compute_uart_br(uint32_t _periph_clock, uint32_t _baud_rate){
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
	return ((_periph_clock + (_baud_rate/2U))/_baud_rate);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	085a      	lsrs	r2, r3, #1
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	441a      	add	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	b29b      	uxth	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007d6:	f000 f811 	bl	80007fc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80007da:	f7ff fe65 	bl	80004a8 <main>

080007de <LoopForever>:

LoopForever:
  b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   r0, =_estack
 80007e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007ec:	08000888 	.word	0x08000888
  ldr r2, =_sbss
 80007f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007f4:	20000024 	.word	0x20000024

080007f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC_IRQHandler>
	...

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000834 <__libc_init_array+0x38>)
 8000800:	4c0d      	ldr	r4, [pc, #52]	@ (8000838 <__libc_init_array+0x3c>)
 8000802:	1b64      	subs	r4, r4, r5
 8000804:	10a4      	asrs	r4, r4, #2
 8000806:	2600      	movs	r6, #0
 8000808:	42a6      	cmp	r6, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	4d0b      	ldr	r5, [pc, #44]	@ (800083c <__libc_init_array+0x40>)
 800080e:	4c0c      	ldr	r4, [pc, #48]	@ (8000840 <__libc_init_array+0x44>)
 8000810:	f000 f818 	bl	8000844 <_init>
 8000814:	1b64      	subs	r4, r4, r5
 8000816:	10a4      	asrs	r4, r4, #2
 8000818:	2600      	movs	r6, #0
 800081a:	42a6      	cmp	r6, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f855 3b04 	ldr.w	r3, [r5], #4
 8000824:	4798      	blx	r3
 8000826:	3601      	adds	r6, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	f855 3b04 	ldr.w	r3, [r5], #4
 800082e:	4798      	blx	r3
 8000830:	3601      	adds	r6, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	08000880 	.word	0x08000880
 8000838:	08000880 	.word	0x08000880
 800083c:	08000880 	.word	0x08000880
 8000840:	08000884 	.word	0x08000884

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	bf00      	nop
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
