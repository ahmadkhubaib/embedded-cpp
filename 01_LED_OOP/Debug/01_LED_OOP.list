
01_LED_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0000143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0000143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000434  08000434  0000143c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000434  0800043c  0000143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000438  08000438  00001438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800043c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800043c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005d2  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c9  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de73  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a39  00000000  00000000  0000fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000502ed  00000000  00000000  00010794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000134  00000000  00000000  00060ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00060bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800041c 	.word	0x0800041c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800041c 	.word	0x0800041c

080001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>:
 *  Created on: Aug 13, 2025
 *      Author: ahmad
 */
#include "led.hpp"

GPIO::GPIO(GPIO_TypeDef *port, uint8_t pin, bool isOutput) :
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	4613      	mov	r3, r2
 80001ec:	71bb      	strb	r3, [r7, #6]
		port(port), pin(pin) {
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	711a      	strb	r2, [r3, #4]
	if (port == GPIOA) {
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	4a30      	ldr	r2, [pc, #192]	@ (80002c0 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xe8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x38>
		RCC->AHB1ENR |= (1U << 0);
 8000202:	4b30      	ldr	r3, [pc, #192]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	4a2f      	ldr	r2, [pc, #188]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30
 800020e:	e02a      	b.n	8000266 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOA
	else if (port == GPIOB) {
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4a2d      	ldr	r2, [pc, #180]	@ (80002c8 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4e>
		RCC->AHB1ENR |= (1U << 1);
 8000218:	4b2a      	ldr	r3, [pc, #168]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	4a29      	ldr	r2, [pc, #164]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	@ 0x30
 8000224:	e01f      	b.n	8000266 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOB
	else if (port == GPIOC) {
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	4a28      	ldr	r2, [pc, #160]	@ (80002cc <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x64>
		RCC->AHB1ENR |= (1U << 2);
 800022e:	4b25      	ldr	r3, [pc, #148]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a24      	ldr	r2, [pc, #144]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
 800023a:	e014      	b.n	8000266 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOC
	else if (port == GPIOD) {
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	4a24      	ldr	r2, [pc, #144]	@ (80002d0 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7a>
		RCC->AHB1ENR |= (1U << 3);
 8000244:	4b1f      	ldr	r3, [pc, #124]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a1e      	ldr	r2, [pc, #120]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000250:	e009      	b.n	8000266 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOD
	else if (port == GPIOE) {
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a1f      	ldr	r2, [pc, #124]	@ (80002d4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xfc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d105      	bne.n	8000266 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
		RCC->AHB1ENR |= (1U << 4);
 800025a:	4b1a      	ldr	r3, [pc, #104]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a19      	ldr	r2, [pc, #100]	@ (80002c4 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
	} // Enable clock for GPIOE

	if (isOutput) {
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d016      	beq.n	800029a <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xc2>
		port->MODER |= (1U << (pin * 2)); // Set pin as output
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	431a      	orrs	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	601a      	str	r2, [r3, #0]
		port->MODER &= ~(1U << (pin * 2 + 1));
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	3301      	adds	r3, #1
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	401a      	ands	r2, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	e00a      	b.n	80002b0 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xd8>
	} else {
		port->MODER &= ~(3U << (pin * 2)); // Set pin as input
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	601a      	str	r2, [r3, #0]
	}
}
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	4618      	mov	r0, r3
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40020800 	.word	0x40020800
 80002d0:	40020c00 	.word	0x40020c00
 80002d4:	40021000 	.word	0x40021000

080002d8 <_ZN4GPIO6toggleEv>:

void GPIO::toggle() {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	port->ODR ^= (1U << pin); // Toggle pin state
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	6959      	ldr	r1, [r3, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	791b      	ldrb	r3, [r3, #4]
 80002ea:	461a      	mov	r2, r3
 80002ec:	2301      	movs	r3, #1
 80002ee:	fa03 f202 	lsl.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	404a      	eors	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <_ZN4GPIO4readEv>:
	port->ODR |= (1U << pin); // Set pin high
}
void GPIO::reset() {
	port->ODR &= ~(1U << pin); // Set pin low
}
bool GPIO::read() {
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U << pin)); // Read pin state
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	691a      	ldr	r2, [r3, #16]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	791b      	ldrb	r3, [r3, #4]
 8000318:	4619      	mov	r1, r3
 800031a:	2301      	movs	r3, #1
 800031c:	408b      	lsls	r3, r1
 800031e:	4013      	ands	r3, r2
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
}
 800032a:	4618      	mov	r0, r3
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
	...

08000338 <main>:
#include "led.hpp"

int main() {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIO led(GPIOA, 5, true); // Create an instance of GPIO for pin PA5 as output
 800033e:	f107 0008 	add.w	r0, r7, #8
 8000342:	2301      	movs	r3, #1
 8000344:	2205      	movs	r2, #5
 8000346:	490c      	ldr	r1, [pc, #48]	@ (8000378 <main+0x40>)
 8000348:	f7ff ff46 	bl	80001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	GPIO button(GPIOC, 13, false); // Create an instance of GPIO for pin PC13 as input
 800034c:	4638      	mov	r0, r7
 800034e:	2300      	movs	r3, #0
 8000350:	220d      	movs	r2, #13
 8000352:	490a      	ldr	r1, [pc, #40]	@ (800037c <main+0x44>)
 8000354:	f7ff ff40 	bl	80001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>

	while (1) {
		if (!button.read()) {
 8000358:	463b      	mov	r3, r7
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffd3 	bl	8000306 <_ZN4GPIO4readEv>
 8000360:	4603      	mov	r3, r0
 8000362:	f083 0301 	eor.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f5      	beq.n	8000358 <main+0x20>
			led.toggle(); // Toggle the LED state
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffb1 	bl	80002d8 <_ZN4GPIO6toggleEv>
		if (!button.read()) {
 8000376:	e7ef      	b.n	8000358 <main+0x20>
 8000378:	40020000 	.word	0x40020000
 800037c:	40020800 	.word	0x40020800

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	@ (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	@ (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003b2:	f7ff ffc1 	bl	8000338 <main>

080003b6 <LoopForever>:

LoopForever:
  b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	@ (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
