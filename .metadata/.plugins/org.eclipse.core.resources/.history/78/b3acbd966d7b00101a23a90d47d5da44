
04_SYSTICK_OOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000708  08000708  00001708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800072c  0800072c  00001734  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800072c  0800072c  00001734  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800072c  08000734  00001734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800072c  0800072c  0000172c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000730  08000730  00001730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000734  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000734  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001001  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008da  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00003040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c8  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e152  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000194a  00000000  00000000  0001138a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000506f6  00000000  00000000  00012cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000633ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000030c  00000000  00000000  00063410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0006371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006f0 	.word	0x080006f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080006f0 	.word	0x080006f0

080001d8 <_ZN6FPU_CP6enableEv>:
 *      Author: ahmad
 */

#include "fpu.hpp"

void FPU_CP::enable(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	SCB->CPACR |= (1 << 20);
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001e2:	4a11      	ldr	r2, [pc, #68]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 80001e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 21);
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 80001f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 22);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 80001fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1 << 23);
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 800020e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000212:	4a05      	ldr	r2, [pc, #20]	@ (8000228 <_ZN6FPU_CP6enableEv+0x50>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <_ZN4GPIOC1EP12GPIO_TypeDefhb>:
 *  Created on: Aug 13, 2025
 *      Author: ahmad
 */
#include "led.hpp"

GPIO::GPIO(GPIO_TypeDef *port, uint8_t pin, bool isOutput) :
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	4611      	mov	r1, r2
 8000238:	461a      	mov	r2, r3
 800023a:	460b      	mov	r3, r1
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	4613      	mov	r3, r2
 8000240:	71bb      	strb	r3, [r7, #6]
		port(port), pin(pin) {
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	711a      	strb	r2, [r3, #4]
	if (port == GPIOA) {
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	4a30      	ldr	r2, [pc, #192]	@ (8000314 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xe8>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x38>
		RCC->AHB1ENR |= (1U << 0);
 8000256:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025a:	4a2f      	ldr	r2, [pc, #188]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6313      	str	r3, [r2, #48]	@ 0x30
 8000262:	e02a      	b.n	80002ba <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOA
	else if (port == GPIOB) {
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	4a2d      	ldr	r2, [pc, #180]	@ (800031c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf0>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d106      	bne.n	800027a <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4e>
		RCC->AHB1ENR |= (1U << 1);
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000270:	4a29      	ldr	r2, [pc, #164]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6313      	str	r3, [r2, #48]	@ 0x30
 8000278:	e01f      	b.n	80002ba <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOB
	else if (port == GPIOC) {
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	4a28      	ldr	r2, [pc, #160]	@ (8000320 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf4>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x64>
		RCC->AHB1ENR |= (1U << 2);
 8000282:	4b25      	ldr	r3, [pc, #148]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a24      	ldr	r2, [pc, #144]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
 800028e:	e014      	b.n	80002ba <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOC
	else if (port == GPIOD) {
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4a24      	ldr	r2, [pc, #144]	@ (8000324 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xf8>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7a>
		RCC->AHB1ENR |= (1U << 3);
 8000298:	4b1f      	ldr	r3, [pc, #124]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029c:	4a1e      	ldr	r2, [pc, #120]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80002a4:	e009      	b.n	80002ba <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
	} // Enable clock for GPIOD
	else if (port == GPIOE) {
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000328 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xfc>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d105      	bne.n	80002ba <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x8e>
		RCC->AHB1ENR |= (1U << 4);
 80002ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xec>)
 80002b4:	f043 0310 	orr.w	r3, r3, #16
 80002b8:	6313      	str	r3, [r2, #48]	@ 0x30
	} // Enable clock for GPIOE

	if (isOutput) {
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d016      	beq.n	80002ee <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xc2>
		port->MODER |= (1U << (pin * 2)); // Set pin as output
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	431a      	orrs	r2, r3
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	601a      	str	r2, [r3, #0]
		port->MODER &= ~(1U << (pin * 2 + 1));
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	3301      	adds	r3, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	e00a      	b.n	8000304 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xd8>
	} else {
		port->MODER &= ~(3U << (pin * 2)); // Set pin as input
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	601a      	str	r2, [r3, #0]
	}
}
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4618      	mov	r0, r3
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40020000 	.word	0x40020000
 8000318:	40023800 	.word	0x40023800
 800031c:	40020400 	.word	0x40020400
 8000320:	40020800 	.word	0x40020800
 8000324:	40020c00 	.word	0x40020c00
 8000328:	40021000 	.word	0x40021000

0800032c <_ZN4GPIO6toggleEv>:

void GPIO::toggle() {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	port->ODR ^= (1U << pin); // Toggle pin state
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6959      	ldr	r1, [r3, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	461a      	mov	r2, r3
 8000340:	2301      	movs	r3, #1
 8000342:	fa03 f202 	lsl.w	r2, r3, r2
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	404a      	eors	r2, r1
 800034c:	615a      	str	r2, [r3, #20]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <_ZN4GPIO4readEv>:
	port->ODR |= (1U << pin); // Set pin high
}
void GPIO::reset() {
	port->ODR &= ~(1U << pin); // Set pin low
}
bool GPIO::read() {
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U << pin)); // Read pin state
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	691a      	ldr	r2, [r3, #16]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	791b      	ldrb	r3, [r3, #4]
 800036c:	4619      	mov	r1, r3
 800036e:	2301      	movs	r3, #1
 8000370:	408b      	lsls	r3, r1
 8000372:	4013      	ands	r3, r2
 8000374:	2b00      	cmp	r3, #0
 8000376:	bf14      	ite	ne
 8000378:	2301      	movne	r3, #1
 800037a:	2300      	moveq	r3, #0
 800037c:	b2db      	uxtb	r3, r3
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <main>:
#include "led.hpp"
#include "usart.hpp"
#include "fpu.hpp"
#include "timebase.hpp"

int main() {
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
	FPU_CP::enable(); // Enable the FPU
 8000392:	f7ff ff21 	bl	80001d8 <_ZN6FPU_CP6enableEv>
	TimeBase::init(); // Initialize the time base for SysTick
 8000396:	f000 f837 	bl	8000408 <_ZN8TimeBase4initEv>
	GPIO led(GPIOA, 5, true); // Create an instance of GPIO for pin PA5 as output
 800039a:	f107 0010 	add.w	r0, r7, #16
 800039e:	2301      	movs	r3, #1
 80003a0:	2205      	movs	r2, #5
 80003a2:	4915      	ldr	r1, [pc, #84]	@ (80003f8 <main+0x6c>)
 80003a4:	f7ff ff42 	bl	800022c <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	GPIO button(GPIOC, 13, false); // Create an instance of GPIO for pin PC13 as input
 80003a8:	f107 0008 	add.w	r0, r7, #8
 80003ac:	2300      	movs	r3, #0
 80003ae:	220d      	movs	r2, #13
 80003b0:	4912      	ldr	r1, [pc, #72]	@ (80003fc <main+0x70>)
 80003b2:	f7ff ff3b 	bl	800022c <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	USART usart(USART2, 115200); // Create an instance of USART for USART2 with baud rate 115200
 80003b6:	463b      	mov	r3, r7
 80003b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003bc:	4910      	ldr	r1, [pc, #64]	@ (8000400 <main+0x74>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f886 	bl	80004d0 <_ZN5USARTC1EP13USART_TypeDefm>

	while (1) {
		usart.sendString("Hello, USART...one second delay!\n\r"); // Send a string over USART
 80003c4:	463b      	mov	r3, r7
 80003c6:	490f      	ldr	r1, [pc, #60]	@ (8000404 <main+0x78>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f907 	bl	80005dc <_ZN5USART10sendStringEPKc>
		TimeBase::delay(1); // Delay for (1 second)
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 f832 	bl	8000438 <_ZN8TimeBase5delayEm>
		if (!button.read()) {
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffbe 	bl	800035a <_ZN4GPIO4readEv>
 80003de:	4603      	mov	r3, r0
 80003e0:	f083 0301 	eor.w	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0ec      	beq.n	80003c4 <main+0x38>
			led.toggle(); // Toggle the LED state
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff9c 	bl	800032c <_ZN4GPIO6toggleEv>
		usart.sendString("Hello, USART...one second delay!\n\r"); // Send a string over USART
 80003f4:	e7e6      	b.n	80003c4 <main+0x38>
 80003f6:	bf00      	nop
 80003f8:	40020000 	.word	0x40020000
 80003fc:	40020800 	.word	0x40020800
 8000400:	40004400 	.word	0x40004400
 8000404:	08000708 	.word	0x08000708

08000408 <_ZN8TimeBase4initEv>:
#define ONE_SEC_DELAY	16000000
#define TICK_FREQ		1

volatile uint32_t TimeBase::msTicks = 0;

void TimeBase::init(){
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
	__disable_irq();
	SysTick->LOAD = ONE_SEC_DELAY - 1; // Load the SysTick timer with the value for 1 second
 8000410:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <_ZN8TimeBase4initEv+0x28>)
 8000412:	4a08      	ldr	r2, [pc, #32]	@ (8000434 <_ZN8TimeBase4initEv+0x2c>)
 8000414:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; // Clear the current value of the SysTick timer
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <_ZN8TimeBase4initEv+0x28>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = CTRL_CLKSOURCE | CTRL_TICKINT | CTRL_ENABLE; // Enable SysTick with processor clock, enable interrupt, and start the timer
 800041c:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <_ZN8TimeBase4initEv+0x28>)
 800041e:	2207      	movs	r2, #7
 8000420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000422:	b662      	cpsie	i
}
 8000424:	bf00      	nop
	__enable_irq();
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	e000e010 	.word	0xe000e010
 8000434:	00f423ff 	.word	0x00f423ff

08000438 <_ZN8TimeBase5delayEm>:

void TimeBase::delay(uint32_t delay){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	uint32_t start = getTicks(); // Get the current tick count
 8000440:	f000 f81e 	bl	8000480 <_ZN8TimeBase8getTicksEv>
 8000444:	60b8      	str	r0, [r7, #8]
	uint32_t waitTicks = delay; // Set the number of ticks to wait
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60fb      	str	r3, [r7, #12]

	if(waitTicks < MAX_DELAY){
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000450:	d002      	beq.n	8000458 <_ZN8TimeBase5delayEm+0x20>
		waitTicks+= TICK_FREQ; // Add one tick to ensure the delay is at least 1 ms
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
	}

	while((getTicks() - start) < waitTicks) {
 8000458:	bf00      	nop
 800045a:	f000 f811 	bl	8000480 <_ZN8TimeBase8getTicksEv>
 800045e:	4602      	mov	r2, r0
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	429a      	cmp	r2, r3
 8000468:	bf8c      	ite	hi
 800046a:	2301      	movhi	r3, #1
 800046c:	2300      	movls	r3, #0
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1f2      	bne.n	800045a <_ZN8TimeBase5delayEm+0x22>
		// Wait until the specified delay has passed
		// This loop will run until the difference between current ticks and start ticks is less than waitTicks
	}
}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <_ZN8TimeBase8getTicksEv>:

uint32_t TimeBase::getTicks(){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000486:	b672      	cpsid	i
}
 8000488:	bf00      	nop
	__disable_irq(); // Disable interrupts to ensure atomic access to msTicks
	uint32_t currentTicks = msTicks; // Read the current tick count
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <_ZN8TimeBase8getTicksEv+0x24>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000490:	b662      	cpsie	i
}
 8000492:	bf00      	nop
	__enable_irq(); // Re-enable interrupts after reading
	return currentTicks;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000001c 	.word	0x2000001c

080004a8 <_ZN8TimeBase13tickIncrementEv>:

void TimeBase::tickIncrement(){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	msTicks += TICK_FREQ; // Increment the msTicks by the tick frequency
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <_ZN8TimeBase13tickIncrementEv+0x18>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	4a03      	ldr	r2, [pc, #12]	@ (80004c0 <_ZN8TimeBase13tickIncrementEv+0x18>)
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <SysTick_Handler>:

extern "C" void SysTick_Handler(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	// This function is called every time the SysTick timer reaches zero
	TimeBase::tickIncrement(); // Increment the msTicks counter
 80004c8:	f7ff ffee 	bl	80004a8 <_ZN8TimeBase13tickIncrementEv>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <_ZN5USARTC1EP13USART_TypeDefm>:

// Forward declarations for static helper functions
static uint16_t compute_uart_br(uint32_t _periph_clock, uint32_t _baud_rate);
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t _periph_clock, uint32_t _baud_rate);

USART::USART(USART_TypeDef *usart, uint32_t baudrate) : usart(usart), baudRate(baudrate){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]
	RCC->AHB1ENR |= (1U << 0);
 80004e8:	4b20      	ldr	r3, [pc, #128]	@ (800056c <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(1U << 4);
 80004f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 80004fa:	f023 0310 	bic.w	r3, r3, #16
 80004fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a1a      	ldr	r2, [pc, #104]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6013      	str	r3, [r2, #0]
	
	GPIOA->AFR[0] |= (1U << 8);
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000516:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000522:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U <<10);
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800052e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U << 11);
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000532:	6a1b      	ldr	r3, [r3, #32]
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <_ZN5USARTC1EP13USART_TypeDefm+0xa0>)
 8000536:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800053a:	6213      	str	r3, [r2, #32]
	
	RCC->APB1ENR |= (1U << 17);
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <_ZN5USARTC1EP13USART_TypeDefm+0x9c>)
 8000542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
	
	setBaudRate(16000000);
 8000548:	490a      	ldr	r1, [pc, #40]	@ (8000574 <_ZN5USARTC1EP13USART_TypeDefm+0xa4>)
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f000 f816 	bl	800057c <_ZN5USART11setBaudRateEm>
	
	USART2->CR1 = (1U << 3);
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 8000552:	2208      	movs	r2, #8
 8000554:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (1U << 13);
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <_ZN5USARTC1EP13USART_TypeDefm+0xa8>)
 800055c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000560:	60d3      	str	r3, [r2, #12]
}
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40023800 	.word	0x40023800
 8000570:	40020000 	.word	0x40020000
 8000574:	00f42400 	.word	0x00f42400
 8000578:	40004400 	.word	0x40004400

0800057c <_ZN5USART11setBaudRateEm>:

void USART::setBaudRate(uint32_t periph_clock) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
    uart_set_baudrate(usart, periph_clock, baudRate);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	461a      	mov	r2, r3
 8000590:	6839      	ldr	r1, [r7, #0]
 8000592:	f000 f83a 	bl	800060a <_ZL17uart_set_baudrateP13USART_TypeDefmm>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <_ZN5USART8sendCharEc>:

void USART::sendChar(char c) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	while (!(USART2->SR & (1U << 7))); // Wait until TXE is set
 80005ac:	bf00      	nop
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <_ZN5USART8sendCharEc+0x38>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf0c      	ite	eq
 80005ba:	2301      	moveq	r3, #1
 80005bc:	2300      	movne	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f4      	bne.n	80005ae <_ZN5USART8sendCharEc+0xe>
	USART2->DR = c & 0xFF; // Send character
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <_ZN5USART8sendCharEc+0x38>)
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	6053      	str	r3, [r2, #4]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400

080005dc <_ZN5USART10sendStringEPKc>:

void USART::sendString(const char *str) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	while (*str) {
 80005e6:	e007      	b.n	80005f8 <_ZN5USART10sendStringEPKc+0x1c>
		sendChar(*str++);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	603a      	str	r2, [r7, #0]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ffd4 	bl	80005a0 <_ZN5USART8sendCharEc>
	while (*str) {
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f3      	bne.n	80005e8 <_ZN5USART10sendStringEPKc+0xc>
	}
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_ZL17uart_set_baudrateP13USART_TypeDefmm>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t _periph_clock, uint32_t _baud_rate){
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_br(_periph_clock, _baud_rate);
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	68b8      	ldr	r0, [r7, #8]
 800061a:	f000 f808 	bl	800062e <_ZL15compute_uart_brmm>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	609a      	str	r2, [r3, #8]
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_ZL15compute_uart_brmm>:

static uint16_t compute_uart_br(uint32_t _periph_clock, uint32_t _baud_rate){
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
	return ((_periph_clock + (_baud_rate/2U))/_baud_rate);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	085a      	lsrs	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	441a      	add	r2, r3
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	b29b      	uxth	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f811 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000686:	f7ff fe81 	bl	800038c <main>

0800068a <LoopForever>:

LoopForever:
  b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000698:	08000734 	.word	0x08000734
  ldr r2, =_sbss
 800069c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a0:	20000020 	.word	0x20000020

080006a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	@ (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	@ (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	@ (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	@ (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 f818 	bl	80006f0 <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	0800072c 	.word	0x0800072c
 80006e4:	0800072c 	.word	0x0800072c
 80006e8:	0800072c 	.word	0x0800072c
 80006ec:	08000730 	.word	0x08000730

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
