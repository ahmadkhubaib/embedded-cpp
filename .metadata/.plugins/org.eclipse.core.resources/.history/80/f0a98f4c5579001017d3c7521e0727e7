/*
 * led.hpp
 *
 *  Created on: Aug 13, 2025
 *      Author: ahmad
 */

#include "stm32f4xx.h"

#ifndef LED_HPP_
#define LED_HPP_

class GPIO {
private:
	GPIO_TypeDef *port;
	uint8_t pin;
public:
	GPIO(GPIO_TypeDef *port, uint8_t pin, bool isOutput) :
			port(port), pin(pin) {
		if (port == GPIOA) {
			RCC->AHB1ENR |= (1U << 0);
		} // Enable clock for GPIOA
		else if (port == GPIOB) {
			RCC->AHB1ENR |= (1U << 1);
		} // Enable clock for GPIOB
		else if (port == GPIOC) {
			RCC->AHB1ENR |= (1U << 2);
		} // Enable clock for GPIOC
		else if (port == GPIOD) {
			RCC->AHB1ENR |= (1U << 3);
		} // Enable clock for GPIOD
		else if (port == GPIOE) {
			RCC->AHB1ENR |= (1U << 4);
		} // Enable clock for GPIOE
		else if (port == GPIOF) {
			RCC->AHB1ENR |= (1U << 5);
		} // Enable clock for GPIOF
		else if (port == GPIOG) {
			RCC->AHB1ENR |= (1U << 6);
		} // Enable clock for GPIOG
		else if (port == GPIOH) {
			RCC->AHB1ENR |= (1U << 7);
		} // Enable clock for GPIOH

		if (isOutput) {
			port->MODER |= (1U << (pin * 2)); // Set pin as output
			port->MODER &= ~(1U << (pin * 2 + 1));
		} else {
			port->MODER &= ~(3U << (pin * 2)); // Set pin as input
		}

	}

	void toggle() {
		port->ODR ^= (1U << pin); // Toggle pin state
	}
	void set() {
		port->ODR |= (1U << pin); // Set pin high
	}
	void reset() {
		port->ODR &= ~(1U << pin); // Set pin low
	}
	bool read() {
		return (port->IDR & pin);
	}
}
#endif /* LED_HPP_ */
